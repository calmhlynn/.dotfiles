# vim: noexpandtab sw=8
[user]
	name = calmhlynn
	email = barca105@naver.com
    signingkey = "E201D1FA43538FCC"
[core]
	editor = nvim
	excludesfile = ~/.gitexclude
	fscache = yes
	preloadindex = yes
	autocrlf = no
	quotepath = no
	precomposeunicode = yes
[init]
	defaultBranch = main
[diff]
	renames = copies
	algorithm = histogram
	submodule = log
[branch]
	sort = committerdate
[fetch]
	prune = yes
	prunetags = true
	fsckobjects = true
[transfer]
	fsckobjects = true
[receive]
	fsckObjects = true
[push]
	default = simple
[pull]
	rebase = true
[rebase]
	autostash = true
	autosquash = true
[merge]
	conflictstyle = zdiff3
[commit]
	verbose = true
	gpgsign = yes
[tag]
	gpgsign = true
[rerere]
	enabled = true
[stash]
	showPatch = true
[status]
	showStash = true
	submoduleSummary = true
[submodule]
	fetchJobs = 0
	recurse = true
[help]
	autocorrect = prompt
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[alias]
    # Branch & status
    st       = status -sb                                                   # show short status with branch info
    ss       = status -s                                                    # show short status
    br       = branch                                                       # list branches
    co       = checkout                                                     # switch branches
    nb       = "!_() { git checkout -b \"$1\"; }; _"                        # create & switch to new branch
    mb       = "!_() { git branch --merged | grep -v '\\*\\|main\\|master' | xargs git branch -D; }; _"  # delete merged branches

    # Commit
    ca       = commit -a                                                    # add all & commit
    amend    = commit --amend --no-edit                                     # amend last commit without editing

    # Log visualization
    g        = "log --graph --decorate --all \
				--pretty='format:%C(auto)%h%d %s %C(brightgreen)%an %x1b[38;5;239m%cr%x1b[0m'"


    # Plain diffs
    ds       = diff --staged                                                # show staged diff
    dc       = diff                                                         # show unstaged diff

    # Interactive add & checkout (requires fzf)
    ia       = add -p                                                        # interactive add
    fco      = "!_() { git branch --all | fzf --ansi --preview 'git log --color=always -n50 --pretty=format:\"%Cgreen%h%Creset %s\" {}' | sed 's/.* //' | xargs git checkout; }; _"  # fuzzy branch checkout
    ff       = "!_() { git ls-files | fzf; }; _"                             # fuzzy find file

    # Pull & push
    up       = "!_() { git pull --rebase && git push; }; _"                 # pull-rebase then push

    # Rebase
    ri       = rebase -i                                                    # interactive rebase
    continue = rebase --continue                                            # continue rebase
    skip     = rebase --skip                                                # skip patch
    abort    = rebase --abort                                               # abort rebase

    # Stash
    stg      = stash                                                        # stash changes
    stl      = stash list                                                   # list stash entries
    stp      = stash pop                                                    # apply stash
    fs       = "!_() { git stash list | fzf; }; _"                          # fuzzy find stash entry
    fsp      = "!_() { git stash list | fzf | awk '{print $1}' | xargs git stash apply; }; _"  # apply selected stash

    # Clean & reset
    clean    = clean -fd                                                    # remove untracked files & dirs
    undo     = reset --soft HEAD^                                           # undo last commit, keep changes
    hard     = reset --hard                                                 # hard reset to HEAD

    # Others
    cp       = cherry-pick                                                   # cherry-pick commit
    tagg     = "!_() { git tag -a \"$1\" -m \"$2\"; }; _"                    # create annotated tag
    grep     = grep --color -n                                               # grep with color & line numbers
    rb       = remote -v                                                     # show remote URLs
    tree     = "!_() { git ls-tree --name-only -r HEAD | sed 's|[^/]*/|   |g'; }; _"    # display project file tree
